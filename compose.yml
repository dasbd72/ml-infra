name: ${SERVICE_NAME}

services:
  minio:
    image: minio/minio:RELEASE.2024-10-02T17-50-41Z-cpuv1
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ~/container_persistent_volumes/${SERVICE_NAME}/minio-data-persist:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    networks:
      - shared_network
    command: server /data --console-address ':9001' --address ':9000'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 20s
    restart: always

  db:
    image: postgres:16.4-bullseye
    ports:
      - "5432:5432"
    volumes:
      - ~/container_persistent_volumes/${SERVICE_NAME}/postgres-data-persist:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - shared_network
    restart: always
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} | grep -q 'accepting connections'
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 20s

  mlflow:
    image: mlflow_server
    build: ./mlflow
    depends_on:
      - minio
      - db
    ports:
      - "5001:5001"
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
    command: > 
      mlflow
      server
      --host 0.0.0.0
      --port 5001
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      --default-artifact-root s3://mlflow/
    networks:
      - shared_network
    restart: always

networks:
  shared_network:
